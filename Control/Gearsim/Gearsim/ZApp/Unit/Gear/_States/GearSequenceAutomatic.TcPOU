<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="GearSequenceAutomatic" Id="{ff39ca27-6139-4bc8-95bf-02dd715e3a6d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GearSequenceAutomatic EXTENDS GearSequence IMPLEMENTS ZCore.ISequence
VAR
  _step : ZCore.Step(GearStep.AutomaticBegin, GearStep.AutomaticEnd);
  _timer : ZAux.Timer;
  _waitDurationShort : ZAux.RandomGaussian(seed:=0, mu:=0.5, sigma:=1);
  _waitDurationLong : ZAux.RandomGaussian(seed:=0, mu:=3, sigma:=1);
  _spin : ZAux.RandomUniform(seed:=0, low:=0, high:=1);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Busy THEN
  RETURN;
END_IF

IF OnStart(_step) THEN
  ; // init custom sequence variables here ...
END_IF

IF OnStop() THEN
  RETURN; // external stop was triggered
END_IF

IF OnHalt() THEN
  ; // Halting := TRUE; // Uncomment to acknowledge that the sequence is halting
END_IF

REPEAT
  LogStep();

  CASE _step.Index OF
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticBegin:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _axis.PositionX.MoveAbsoluteAsync(THIS^, _data.Machine.SafePositionX, _data.Machine.HighspeedX);
        _axis.RotationC.MoveVelocityAsync(THIS^, _data.Machine.HighspeedC);
      END_IF

      _step.SetNext(GearStep.AutomaticCloseGap);
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticCloseGap:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _axis.PositionX.MoveAbsoluteAsync(THIS^, _data.Machine.SpinPositionX, _data.Machine.HighspeedX);
      END_IF

      Assert(_axis.RotationC);
      Await(obj1:=_axis.PositionX, nextStep:=GearStep.AutomaticSynchronized);
      _step.SetNext(GearStep.AutomaticSynchronized);   
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSynchronized:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    
      IF _step.OnEntry()
      THEN
        _timer.WaitAsync(_waitDurationLong.Next());
			END_IF
    
      Assert(_axis.PositionX);
      Assert(_axis.RotationC);
      
      IF ADR(_parent) = ADR(ZModuleProgram.RightGear) AND_THEN _timer.Done
      THEN
        IF _spin.Next() > 0.5
        THEN
          _step.SetNext(GearStep.AutomaticOpenGap);
				END_IF
			END_IF
      
      IF Halting
      THEN
        _step.SetNext(GearStep.AutomaticOpenGap);  
			END_IF
    
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticOpenGap:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)    
      IF _step.OnEntry()
      THEN
        _axis.PositionX.MoveAbsoluteAsync(THIS^, _data.Machine.SafePositionX, _data.Machine.HighspeedX);
      END_IF

      Assert(_axis.RotationC);
      
      IF Halting
      THEN
        Await(obj1:=_axis.PositionX, nextStep:=GearStep.AutomaticTearDown);
        _step.SetNext(GearStep.AutomaticEnd);
      ELSE
        _step.SetNext(GearStep.AutomaticSpinFast);
			END_IF

    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSpinFast:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _timer.WaitAsync(_waitDurationLong.Next());
        _axis.RotationC.MoveVelocityAsync(THIS^, _data.Machine.HighspeedC*2);
      END_IF

      Assert(_axis.RotationC);

      IF _timer.Done
      THEN
        _step.SetNext(GearStep.AutomaticSpin);          
			END_IF


    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSpin:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _timer.WaitAsync(_waitDurationShort.Next());
        _axis.RotationC.MoveVelocityAsync(THIS^, _data.Machine.HighspeedC);
      END_IF

      Assert(_axis.RotationC);
      
      IF _timer.Done
      THEN
        _step.SetNext(GearStep.AutomaticCloseGap);          
			END_IF
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticTearDown:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)    
      IF _step.OnEntry()
      THEN
        _axis.PositionX.MoveAbsoluteAsync(THIS^, _data.Machine.HomePositionX, _data.Machine.HighspeedX);
        _axis.RotationC.MoveVelocityAsync(THIS^, _data.Machine.SlowspeedC);
      END_IF

      Assert(_axis.RotationC);
      // Await(obj1:=, nextStep:=GearStep.AutomaticEnd);
      _step.SetNext(GearStep.AutomaticEnd);
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticHalt:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)    
      IF _step.OnEntry()
      THEN
        _axis.RotationC.StopAsync(THIS^);
      END_IF

      Assert(_axis.RotationC);
      Await(obj1:=_axis.RotationC, nextStep:=GearStep.AutomaticEnd);
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticEnd:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      SetBusy(FALSE);
  
  ELSE
    Abort('sequence contains unhandled step');
  END_CASE
UNTIL _step.IsNotRepeatable() OR_ELSE NOT Busy END_REPEAT]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>