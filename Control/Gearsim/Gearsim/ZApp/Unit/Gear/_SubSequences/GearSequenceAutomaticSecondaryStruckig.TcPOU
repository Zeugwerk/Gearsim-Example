<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="GearSequenceAutomaticSecondaryStruckig" Id="{09d5af09-ec05-43a2-bf2b-2ab2f2f981c6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GearSequenceAutomaticSecondaryStruckig EXTENDS GearSequence IMPLEMENTS ZCore.ISequence
VAR
  _step : ZCore.Step(GearStep.AutomaticSecondaryStruckigBegin, GearStep.AutomaticSecondaryStruckigEnd);
  _timer : ZAux.Timer;
  _waitDurationShort : ZAux.RandomGaussian(seed:=0, mu:=0.5, sigma:=1);
  _waitDurationLong : ZAux.RandomGaussian(seed:=0, mu:=3, sigma:=1);
  _spin : ZAux.RandomUniform(seed:=0, low:=0, high:=1);  
  _otg : Struckig.Otg(cycletime:=0, dofs:=1);
  _rt : ZAux.RealTime;
  _startToken : ZCore.StartToken;
  
  _var1 : LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Busy THEN
  RETURN;
END_IF

IF OnStart(_step) THEN
  ; // init custom sequence variables here ...
END_IF

IF OnStop() THEN
  RETURN; // external stop was triggered
END_IF

IF OnHalt() THEN
  ; // Halting := TRUE; // Uncomment to acknowledge that the sequence is halting
END_IF

REPEAT
  LogStep();

  CASE _step.Index OF
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigBegin:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _waitDurationShort.SetSeed(_data.Machine.Role);
        _waitDurationLong.SetSeed(_data.Machine.Role);
      
        _axis.PositionX.MoveAbsoluteAsync(THIS^, _data.Machine.SafePositionX, _data.Machine.HighspeedX);        
        _axis.RotationC.MoveInterpolatedPositionAsync(THIS^);
        
        _otg.CycleTime := _rt.CycleTimeInSeconds();
        _otg.ControlInterface := Struckig.ControlInterfaceType.Velocity;        
        _otg.CurrentPosition[0] := _axis.RotationC.ActualPosition;
        _otg.CurrentVelocity[0] := 0;
        _otg.CurrentAcceleration[0] := 0;
        
        _otg.MaxAcceleration[0] := _axis.RotationC.Parameter.Simulation.ProfileAcceleration;
        _otg.MaxJerk[0] := _axis.RotationC.Parameter.Simulation.ProfileJerk;
        _otg.MaxVelocity[0] := 10 * _data.Machine.HighspeedC; 
        _otg.EnableAutoPropagate := TRUE;    
      END_IF

      Await2(obj1:=_axis.RotationC, obj2:=_axis.PositionX, nextStep:=GearStep.AutomaticSecondaryStruckigRotate);	  
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigRotate:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
	  
      IF _step.OnEntry()
      THEN
        _otg.TargetVelocity[0] := _data.Machine.HighspeedC;
        
        // synchronize movement such that in 2 turns there is no offset
        _otg.ControlInterface := Struckig.ControlInterfaceType.Position;
        _otg.TargetPosition[0] := _axis.RotationC.ActualPosition + 180.0 - _parent.PhaseOffsetC;
        _otg.MinDuration := 180.0 / _data.Machine.HighspeedC;
        
      ELSIF _otg.State = Struckig.TrajectoryState.Error
      THEN
        Abort(_otg.ErrorMessage());
      ELSIF _otg.State = Struckig.TrajectoryState.Idle
      THEN
        _step.SetNext(GearStep.AutomaticSecondaryStruckigCloseGap);
      END_IF
	  
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigCloseGap:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _axis.PositionX.MoveAbsoluteAsync(THIS^, _data.Machine.SpinPositionX, _data.Machine.HighspeedX);
      END_IF

      Assert(_axis.RotationC);
      Await(obj1:=_axis.PositionX, nextStep:=GearStep.AutomaticSecondaryStruckigSynchronized);
      _step.SetNext(GearStep.AutomaticSecondaryStruckigSynchronized);   
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigSynchronized:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    
      IF _step.OnEntry()
      THEN
        _timer.WaitAsync(_waitDurationLong.Next());
			END_IF
    
      Assert(_axis.PositionX);
      Assert(_axis.RotationC);
      
      IF _timer.Done
      THEN
        IF _spin.Next() > 0.5
        THEN
          _step.SetNext(GearStep.AutomaticSecondaryStruckigOpenGap);
				END_IF
			END_IF
      
      IF Halting
      THEN
        _step.SetNext(GearStep.AutomaticSecondaryStruckigOpenGap);  
			END_IF
    
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigOpenGap:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)    
      IF _step.OnEntry()
      THEN
        _axis.PositionX.MoveAbsoluteAsync(THIS^, _data.Machine.SafePositionX, _data.Machine.HighspeedX);
      END_IF

      Assert(_axis.RotationC);
      
      IF Halting
      THEN
        Await(obj1:=_axis.PositionX, nextStep:=GearStep.AutomaticSecondaryStruckigTearDown);
        _step.SetNext(GearStep.AutomaticSecondaryStruckigEnd);
      ELSE
        _step.SetNext(GearStep.AutomaticSecondaryStruckigSpinFast);
			END_IF

    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigSpinFast:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _timer.WaitAsync(_waitDurationLong.Next());
        _otg.ControlInterface := Struckig.ControlInterfaceType.Velocity;
        _otg.TargetVelocity[0] := _data.Machine.HighspeedC*2;
        _otg.MinDuration := 0;
        
      ELSIF _otg.State = Struckig.TrajectoryState.Error
      THEN
        Abort(_otg.ErrorMessage());
        
      ELSIF _timer.Done AND_THEN _otg.State = Struckig.TrajectoryState.Idle
      THEN
        _step.SetNext(GearStep.AutomaticSecondaryStruckigSpin);          
			END_IF   
    
      Assert(_axis.RotationC);

    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigSpin:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _otg.TargetVelocity[0] := _data.Machine.HighspeedC;
        
        // synchronize movement such that in several turns there is no offset
        _otg.ControlInterface := Struckig.ControlInterfaceType.Position;
        _otg.TargetPosition[0] := _axis.RotationC.ActualPosition + _data.Machine.ToothAngle * 3 - _parent.PhaseOffsetC;
        _otg.MinDuration := _data.Machine.ToothAngle * 5 / _data.Machine.HighspeedC;
        
        _timer.WaitAsync(_waitDurationShort.Next());
      ELSIF _otg.State = Struckig.TrajectoryState.Error
      THEN
        Abort(_otg.ErrorMessage());
      ELSIF _timer.Done AND_THEN _otg.State = Struckig.TrajectoryState.Idle
      THEN
        _step.SetNext(GearStep.AutomaticSecondaryStruckigCloseGap);          
			END_IF
      
      Assert(_axis.RotationC);
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigTearDown:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)    
      IF _step.OnEntry()
      THEN
        _axis.PositionX.MoveAbsoluteAsync(THIS^, _data.Machine.HomePositionX, _data.Machine.HighspeedX);
        _otg.TargetVelocity[0] := _data.Machine.SlowspeedC;
      END_IF

      Assert(_axis.RotationC);
      IF _otg.State = Struckig.TrajectoryState.Error
      THEN
        Abort(_otg.ErrorMessage());
      END_IF
      
      _step.SetNext(GearStep.AutomaticSecondaryStruckigHalt);
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigHalt:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)    
      IF _step.OnEntry()
      THEN
        _axis.RotationC.StopAsync(THIS^);
      END_IF

      Assert(_axis.RotationC);
      Await(obj1:=_axis.RotationC, nextStep:=GearStep.AutomaticSecondaryStruckigEnd);
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticSecondaryStruckigEnd:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      SetBusy(FALSE);
  
  ELSE
    Abort('sequence contains unhandled step');
  END_CASE
UNTIL _step.IsNotRepeatable() OR_ELSE NOT Busy END_REPEAT

// Update trajactory
IF _step.Index >= GearStep.AutomaticSecondaryStruckigRotate
THEN
  _otg();
  _axis.RotationC.SetInterpolatedPosition(startToken:=_startToken, _otg.CurrentPosition[0]);
  _axis.RotationC.SetInterpolatedVelocity(startToken:=_startToken, _otg.CurrentVelocity[0]);
END_IF

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>