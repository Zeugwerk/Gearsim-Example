<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="GearSequenceAutomaticPrimary" Id="{cc9958b9-4d13-4cae-8076-ec6933855327}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GearSequenceAutomaticPrimary EXTENDS GearSequence IMPLEMENTS ZCore.ISequence
VAR
  _step : ZCore.Step(GearStep.AutomaticPrimaryBegin, GearStep.AutomaticPrimaryEnd);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Busy THEN
  RETURN;
END_IF

IF OnStart(_step) THEN
  ; // init custom sequence variables here ...
END_IF

IF OnStop() THEN
  RETURN; // external stop was triggered
END_IF

IF OnHalt() THEN
  Halting := TRUE;
END_IF

REPEAT
  LogStep();

  CASE _step.Index OF
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticPrimaryBegin:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _axis.RotationC.MoveVelocityAsync(THIS^, _data.Machine.HighspeedC);
      END_IF

      IF Halting
      THEN
        _step.SetNext(GearStep.AutomaticPrimaryHalt);
			END_IF
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticPrimaryHalt:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)    
      IF _step.OnEntry()
      THEN
        _axis.RotationC.StopAsync(THIS^);
      END_IF

      Assert(_axis.RotationC);
      Await(obj1:=_axis.RotationC, nextStep:=GearStep.AutomaticPrimaryEnd);
            
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    GearStep.AutomaticPrimaryEnd:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      SetBusy(FALSE);
  
  ELSE
    Abort('sequence contains unhandled step');
  END_CASE
UNTIL _step.IsNotRepeatable() OR_ELSE NOT Busy END_REPEAT]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>